service: proj-api

frameworkVersion: '3'

package:
  individually: true
  include:
  - index.ts

provider:
  profile: LOCAL-USE-ONLY
  name: aws
  runtime: nodejs18.x

custom:
  serverless-offline:
    host: 0.0.0.0
    httpPort: 3034
    useChildProcesses: true
    reloadHandler: true
  esbuild:
    exclude: ['pg-native', 'superagent-proxy']

functions:
  user-create:
    handler: src/user/create/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: user
          method: POST
          cors: true

  users-get-all:
    handler: src/user/get-all/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: users
          method: GET
          cors: true

    
  comment-create:
    handler: src/comment/create/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: comment
          method: POST
          cors: true

  project-create:
    handler: src/project/create/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: project
          method: POST
          cors: true

plugins:
  - serverless-esbuild
  - serverless-offline
