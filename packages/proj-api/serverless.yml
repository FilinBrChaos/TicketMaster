service: proj-api

frameworkVersion: '3'

package:
  individually: true
  include:
  - index.ts

provider:
  profile: LOCAL-USE-ONLY
  name: aws
  runtime: nodejs18.x

custom:
  serverless-offline:
    host: 0.0.0.0
    httpPort: 3034
    useChildProcesses: true
    reloadHandler: true
  esbuild:
    exclude: ['pg-native', 'superagent-proxy']

functions:
  user-create:
    handler: src/user/create/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: users
          method: POST
          cors: true

  users-get-all:
    handler: src/user/get-all/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: users
          method: GET
          cors: true

  user-get: 
    handler: src/user/get/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: users/{userId}
          method: GET
          cors: true

  user-delete:
    handler: src/user/delete/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: users/{userId}
          method: DELETE
          cors: true


  project-create:
    handler: src/project/create/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: projects
          method: POST
          cors: true

  project-get:
    handler: src/project/get/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: projects/{projId}
          method: GET
          cors: true

  project-get-all:
    handler: src/project/get-all/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: projects
          method: GET
          cors: true

  project-delete:
    handler: src/project/delete/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: projects/{projId}
          method: DELETE
          cors: true


  ticket-create:
    handler: src/ticket/create/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: tickets
          method: POST
          cors: true

  ticket-get:
    handler: src/ticket/get/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: ticket/{ticketId}
          method: GET
          cors: true

  ticket-get-all:
    handler: src/ticket/get-all/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: tickets/{projId}
          method: GET
          cors: true

  ticket-delete:
    handler: src/ticket/delete/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: tickets/{ticketId}
          method: DELETE
          cors: true

  ticket-update:
    handler: src/ticket/update/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: tickets/{ticketId}
          method: PUT
          cors: true


  label-create:
    handler: src/label/create/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: labels
          method: POST
          cors: true

  label-get:
    handler: src/label/get/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: label/{labelId}
          method: GET
          cors: true

  label-get-all:
    handler: src/label/get-all/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: labels/{projId}
          method: GET
          cors: true

  label-delete:
    handler: src/label/delete/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: labels/{labelId}
          method: DELETE
          cors: true


  comment-create:
    handler: src/comment/create/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: comments
          method: POST
          cors: true

  comment-get:
    handler: src/comment/get/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: comments
          method: GET
          cors: true

  comment-delete:
    handler: src/comment/delete/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: comments
          method: DELETE
          cors: true

  assign-users:
    handler: src/assign-users-to-ticket/assign-users/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: assign-users
          method: POST
          cors: true

  get-assigned-users:
    handler: src/assign-users-to-ticket/get-assigned-users/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: assign-users
          method: GET
          cors: true

  get-unassigned-users:
    handler: src/assign-users-to-ticket/get-unassigned-users/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: unassign-users
          method: GET
          cors: true

  unassign-user:
    handler: src/assign-users-to-ticket/unassign-user/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: assign-users
          method: DELETE
          cors: true


  retro-create:
    handler: src/retro/create/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: retros
          method: POST
          cors: true

  retro-get:
    handler: src/retro/get/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: retro/{retroId}
          method: GET
          cors: true

  retro-get-all:
    handler: src/retro/get-all/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: retros/{projId}
          method: GET
          cors: true

  retro-delete:
    handler: src/retro/delete/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: retros/{retroId}
          method: DELETE
          cors: true

  note-create:
    handler: src/note/create/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: notes
          method: POST
          cors: true

  note-delete:
    handler: src/note/delete/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: notes/{noteId}
          method: DELETE
          cors: true

  note-get:
    handler: src/note/get/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: note/{noteId}
          method: GET
          cors: true

  note-get-all:
    handler: src/note/get-all/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: notes/{retroId}
          method: GET
          cors: true

  topic-create:
    handler: src/topic/create/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: topics
          method: POST
          cors: true

  topic-delete:
    handler: src/topic/delete/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: topics/{topicId}
          method: DELETE
          cors: true

  topic-get:
    handler: src/topic/get/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: topic/{topicId}
          method: GET
          cors: true

  topic-get-all:
    handler: src/topic/get-all/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: topics/{retroId}
          method: GET
          cors: true

  get-ticket-labels:
    handler: src/ticket-labels/get-ticket-labels/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: ticket-labels
          method: GET
          cors: true

  get-not-ticket-labels:
    handler: src/ticket-labels/get-not-ticket-labels/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: not-ticket-labels
          method: GET
          cors: true

  add-labels-to-ticket:
    handler: src/ticket-labels/add-labels-to-tickets/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: add-labels-to-ticket
          method: POST
          cors: true

  remove-label-from-ticket:
    handler: src/ticket-labels/remove-label-from-ticket/index.index
    timeout: 60
    environment:
      postgresHost:                     ${file(env/api-config.json):postgresHost}
      postgresPort:                     ${file(env/api-config.json):postgresPort}
      postgresDatabase:                 ${file(env/api-config.json):postgresDatabase}
      postgresUser:                     ${file(env/api-config.json):postgresUser}
      postgresPassword:                 ${file(env/api-config.json):postgresPassword}
    events:
      - http:
          path: remove-label-from-ticket
          method: DELETE
          cors: true


plugins:
  - serverless-esbuild
  - serverless-offline
